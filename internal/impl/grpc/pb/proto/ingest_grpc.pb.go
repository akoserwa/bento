// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: proto/ingest.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BentoIngress_Publish_FullMethodName   = "/bento.grpc.BentoIngress/Publish"
	BentoIngress_Subscribe_FullMethodName = "/bento.grpc.BentoIngress/Subscribe"
)

// BentoIngressClient is the client API for BentoIngress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BentoIngressClient interface {
	// Client-side streaming of frames into Bento (used by an output component)
	Publish(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Frame, PublishResponse], error)
	// Server-side streaming of frames out of Bento (used by an input component)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Frame], error)
}

type bentoIngressClient struct {
	cc grpc.ClientConnInterface
}

func NewBentoIngressClient(cc grpc.ClientConnInterface) BentoIngressClient {
	return &bentoIngressClient{cc}
}

func (c *bentoIngressClient) Publish(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Frame, PublishResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BentoIngress_ServiceDesc.Streams[0], BentoIngress_Publish_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Frame, PublishResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BentoIngress_PublishClient = grpc.ClientStreamingClient[Frame, PublishResponse]

func (c *bentoIngressClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Frame], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BentoIngress_ServiceDesc.Streams[1], BentoIngress_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, Frame]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BentoIngress_SubscribeClient = grpc.ServerStreamingClient[Frame]

// BentoIngressServer is the server API for BentoIngress service.
// All implementations must embed UnimplementedBentoIngressServer
// for forward compatibility.
type BentoIngressServer interface {
	// Client-side streaming of frames into Bento (used by an output component)
	Publish(grpc.ClientStreamingServer[Frame, PublishResponse]) error
	// Server-side streaming of frames out of Bento (used by an input component)
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Frame]) error
	mustEmbedUnimplementedBentoIngressServer()
}

// UnimplementedBentoIngressServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBentoIngressServer struct{}

func (UnimplementedBentoIngressServer) Publish(grpc.ClientStreamingServer[Frame, PublishResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedBentoIngressServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Frame]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedBentoIngressServer) mustEmbedUnimplementedBentoIngressServer() {}
func (UnimplementedBentoIngressServer) testEmbeddedByValue()                      {}

// UnsafeBentoIngressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BentoIngressServer will
// result in compilation errors.
type UnsafeBentoIngressServer interface {
	mustEmbedUnimplementedBentoIngressServer()
}

func RegisterBentoIngressServer(s grpc.ServiceRegistrar, srv BentoIngressServer) {
	// If the following call pancis, it indicates UnimplementedBentoIngressServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BentoIngress_ServiceDesc, srv)
}

func _BentoIngress_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BentoIngressServer).Publish(&grpc.GenericServerStream[Frame, PublishResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BentoIngress_PublishServer = grpc.ClientStreamingServer[Frame, PublishResponse]

func _BentoIngress_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BentoIngressServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, Frame]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BentoIngress_SubscribeServer = grpc.ServerStreamingServer[Frame]

// BentoIngress_ServiceDesc is the grpc.ServiceDesc for BentoIngress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BentoIngress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bento.grpc.BentoIngress",
	HandlerType: (*BentoIngressServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _BentoIngress_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _BentoIngress_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ingest.proto",
}
